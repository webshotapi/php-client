name: Create Release with Release Notes

on:
  push:
    tags:
      - 'v*'  # This will trigger the workflow on any tag that starts with "v" (e.g., v1.0.0)

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # To fetch all history and tags

      # Step 2: Get the previous tag (previous release)
      - name: Get previous tag
        id: prev_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | sed -n '2p' || echo "")
          echo "Previous tag: $PREV_TAG"
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      # Step 3: Generate release notes from commits
      - name: Generate release notes
        id: release_notes
        run: |
          REPO_URL="https://github.com/${{ github.repository }}"
          RELEASE_BODY="## What's New in ${{ github.ref_name }}\n\n### Changes:\n"
          
          if [ -z "$PREV_TAG" ]; then
            RELEASE_BODY="ðŸš€ **First Release!**\n\nðŸŽ‰ Welcome to the first release of the project!"
          else
            # Retrieve commit hashes, usernames, and commit messages
            COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"%h %ae: %s" --reverse)
            for COMMIT in $COMMITS; do
              SHORT_HASH=$(echo $COMMIT | cut -d' ' -f1)
              AUTHOR_EMAIL=$(echo $COMMIT | cut -d' ' -f2)
              MESSAGE=$(echo $COMMIT | cut -d' ' -f3-)
              COMMIT_URL="$REPO_URL/commit/$SHORT_HASH"
              
              # Fetch GitHub login from email address
              GITHUB_LOGIN=$(curl -s "https://api.github.com/search/users?q=${AUTHOR_EMAIL}+in:email" | jq -r '.items[0].login')

              # If GitHub login is found, format with @username
              if [ "$GITHUB_LOGIN" != "null" ]; then
                RELEASE_BODY+=" - ðŸ”¹ [$SHORT_HASH]($COMMIT_URL) by @$GITHUB_LOGIN: $MESSAGE\n"
              else
                # If GitHub login isn't found, fall back to the author's email
                RELEASE_BODY+=" - ðŸ”¹ [$SHORT_HASH]($COMMIT_URL) by <$AUTHOR_EMAIL>: $MESSAGE\n"
              fi
            done
          fi

          # Save the release body to a file instead of the environment variable
          echo "$RELEASE_BODY" > release_notes.txt

      # Step 4: Load release notes into an environment variable
      - name: Load release notes into variable
        id: load_notes
        run: |
          RELEASE_BODY=$(cat release_notes.txt)
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo -e "$RELEASE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 5: Create the release on GitHub
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: ${{ env.RELEASE_BODY }}  # Use the loaded environment variable with markdown
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
